name: H-DAE

on:
  pull_request:
    branches:
      - 'track/hdae/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'
      - name: Install dev tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Doctor (if present)
        run: |
          if [ -x scripts/dev/codex_session_doctor.sh ]; then scripts/dev/codex_session_doctor.sh --fix || true; fi

  hdae-run:
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'
      - name: Install dev tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Verify H-DAE setup
        run: make hdae-verify
      - name: Scan
        run: python -m tools.hdae.cli scan > hdae-scan.jsonl || true
      - name: Gate on unwaived L1 (PR footprint)
        id: gate
        run: |
          python tools/hdae/meta/gate_l1.py --pr "${{ github.event.pull_request.number }}" --base "${{ github.base_ref }}" | tee gate.json
      - name: Propose (dry-run)
        run: python -m tools.hdae.cli propose --dry-run > hdae-diff.txt || true
      - name: Verify (ruff/mypy/pytest)
        run: python -m tools.hdae.cli verify
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hdae-artifacts
          path: |
            hdae-scan.jsonl
            hdae-diff.txt
            docs/agents/waivers/**/*.md
            gate.json
      - name: Summarize in PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pr = context.payload.pull_request?.number ?? context.issue.number;
            const j = JSON.parse(fs.readFileSync('gate.json','utf8'));
            const body = [
              '### H-DAE Summary',
              `- Findings (all scan): **${j.total_all}**`,
              `- L1 in PR footprint (${j.gate_tf_ids.join(', ')}): **${j.l1_in_pr}**`,
              `- Waivers (this PR): **${j.waivers}**`,
              `- Remaining L1 (unwaived): **${j.remaining_l1}**`,
              '',
              `- Changed files: ${j.changed_files}`,
              '',
              '> L1 invariants outrank all else; unresolved L1 issues without waivers fail CI.',
            ].join('\n');
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, body });
      - name: Enforce gate result
        run: |
          test "$(jq -r .remaining_l1 gate.json)" = "0"
